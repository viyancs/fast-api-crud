
[report]
show_missing = True
omit =
    venv/*
    tests/*
    src/fastapi_quickcrud/misc/abstract_execute.py
    src/fastapi_quickcrud/misc/abstract_query.py
# Regexes for lines to exclude from consideration
exclude_lines =
    raise NotImplementedError
    self._exclude_column = \[\]
    if __name__ == .__main__.:
    pass
    session.expire_all()
    return async_execute_and_expire_result
    if 'duplicate key value violates unique constraint' not in err_msg:
    raise UnknownError(f'Unknown error, {i}')
    response_result = await parsing_service.async_find_one
    return response_result
    parsed_response = await parsing_service.async_find_many*
    return await parsing_service.async_upsert_one*
    return await parsing_service.async_upsert_many*
    return await parsing_service.async_delete_one*
    return await parsing_service.async_delete_many*
    return await result_parser.async_post_redirect_get*
    return await result_parser.async_update_one*
    return await result_parser.async_patch_many*
    return await result_parser.async_update_one*
    return await result_parser.async_update_many*
    return result
    raise FindOneApiNotRegister*
    return RedirectResponse.*?redirect_url
    raise QueryOperatorNotFound(f'The query operator of {column_name} not found!')
    raise InvalidRequestMethod(f'{request_method} is not an available request method')
    raise RequestMissing*
    raise InvalidRequestMethod.*?f'{value} is not an available request method, Please use CrudMethods
    delattr(received_insert, received_insert_item)
    delattr(request_or_response_object, name)
    routes_source = SQLAlchemyNotSupportRouteSource
    query_service = SQLAlchemyNotSupportQueryService